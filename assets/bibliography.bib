This is from Project Runeberg book called The key to science In swedish.
This etching first appeared in 1889 in Henri de Parville's French translation/update of François-Napoléon-Marie Moigno's update of Ebenezer Cobham Brewer's book originally titled, A guide to the scientific knowledge of things familiar.
The French 1889 edition is titled, La clef de la science, explication des phénomènes de tous les jours par Brewer et Moigno.
This Wikimedia Commons image is a scan from the 1890 Swedish translation by Thore Kahlmeter, Hvarför? och Huru? Nyckel till naturvetenskaperna and is taken from Project Runeberg here.
The original etching in the French edition can be seen on Google Books here.
https://books.google.co.uk/books?id=IB8_AAAAYAAJ&dq=Ebenezer+Cobham+Brewer,+François+Napoléon+Marie+Moigno,+Henri+de+Parville&pg=PA227&redir_esc=y#v=onepage&q&f=false
https://en.wikipedia.org/wiki/History_of_the_telephone#/media/File:Trådtelefon-illustration.png

@article{Abramsky93:ll,
  abstract = {We study Girard's linear logic from the point of view of giving a concrete computational interpretation of the logic, based on the Curry—Howard isomorphism. In the case of Intuitionistic linear logic, this leads to a refinement of the lambda calculus, giving finer control over order of evaluation and storage allocation, while maintaining the logical content of programs as proofs, and computation as cut-elimination. In the classical case, it leads to a concurrent process paradigm with an operational semantics in the style of Berry and Boudol's chemical abstract machine. This opens up a promising new approach to the parallel implementation of functional programming languages; and offers the prospect of typed concurrent programming in which correctness is guaranteed by the typing.},
  author   = {Samson Abramsky},
  doi      = {10.1016/0304-3975(93)90181-R},
  issn     = {0304-3975},
  journal  = {Theoretical Computer Science},
  number   = {1},
  pages    = {3-57},
  title    = {Computational interpretations of linear logic},
  volume   = {111},
  year     = {1993},
}

@article{Abramsky94:proofs-as-processes,
  address   = {GBR},
  author    = {Abramsky, Samson},
  doi       = {10.1016/0304-3975(94)00103-0},
  issn      = {0304-3975},
  journal   = {Theoretical Computer Science},
  month     = apr,
  number    = {1},
  numpages  = {5},
  pages     = {5–9},
  publisher = {Elsevier Science Publishers Ltd.},
  title     = {Proofs as Processes},
  volume    = {135},
  year      = {1994},
}

@inproceedings{AltenkirchHS195:nbe,
  address   = {Berlin, Heidelberg},
  author    = {Altenkirch, Thorsten
               and Hofmann, Martin
               and Streicher, Thomas},
  booktitle = {Category Theory and Computer Science},
  editor    = {Pitt, David
               and Rydeheard, David E.
               and Johnstone, Peter},
  isbn      = {978-3-540-44661-3},
  pages     = {182--199},
  publisher = {Springer Berlin Heidelberg},
  title     = {Categorical reconstruction of a reduction free normalization proof},
  year      = {1995},
}

@article{Andreoli92:focusing,
  abstract = {The deep symmetry of linear logic [18] makes it suitable for providing abstract models of computation, free from implementation details which are, by nature, oriented and non-symmetrical. I propose here one such model, in the area of logic programming, where the basic computational priciple isComputation = Proof searchProofs cinsidered here are those of the Gentzen style sequent calculus for linear logic. However, proofs in this system may be redundant, in that two proofs canbe syntactically different although identical up to some irrelevant reordering or simplification of the applications of the inferences rules. This leads to an untractable proof search where the search procedure is forced to make costly choices whch turn out to be irrelevant. To overcome this problem, a subclass of proofs, called the ‘focusing’ proofs, which is both complete (any derivable formla in linear logic has a focusing proof) and tractable (many irrelevant choices in the search are eliminated when aimed at focusing proofs) is identified. The main constraint underlying the specificatuon of focusing proofs has been to preserve the symmetry of linear logic, which is its most salient feature. In particular, dual connectives have dual properties with respect to focusing proofsThen, a progrmming language, called LinLog, consisting of a fragment of linear logic, in which focussing proofs have a more compact form, is presented. Linlog deals with formulae which have a syntax similar to the of the definite clauses and goals of Horn logic, but the crucial difference here is that it allows clauses with multiple atoms in the head, connected by the ‘par’ (multiplicative disjuction). It is then shown that the syntyactic restriction induced by LinLog is not performed at the cost of any expressive power: a mapping from full linear logic to LinLog, preserving focusing proofs, and analogous to the normalization to clausal form for classical logic, is presented.},
  author   = {Andreoli, Jean-Marc},
  doi      = {10.1093/logcom/2.3.297},
  issn     = {0955-792X},
  journal  = {Journal of Logic and Computation},
  month    = 6,
  number   = {3},
  pages    = {297-347},
  title    = {Logic Programming with Focusing Proofs in Linear Logic},
  volume   = {2},
  year     = {1992},
}

@article{Atkey09:imonad,
  author  = {Robert Atkey},
  doi     = {10.1017/S095679680900728X},
  journal = {Journal of Functional Programming},
  number  = {3 \& 4},
  pages   = {335-376},
  title   = {Parameterised notions of computation},
  volume  = {19},
  year    = {2009},
}

@inproceedings{Atkey17:obs-cp,
  author    = {Robert Atkey},
  booktitle = {Programming Languages and Systems - 26th European Symposium on Programming, {ESOP} 2017},
  doi       = {10.1007/978-3-662-54434-1_3},
  editor    = {Hongseok Yang},
  pages     = {56-82},
  series    = {Lecture Notes in Computer Science},
  title     = {Observed Communication Semantics for Classical Processes},
  volume    = {10201},
  year      = {2017},
}

@inbook{AtkeyLM16:ccc,
  author    = {Atkey, Robert
               and Lindley, Sam
               and Morris, J. Garrett},
  title     = {Conflation Confers Concurrency},
  booktitle = {A List of Successes That Can Change the World: Essays Dedicated to Philip Wadler on the Occasion of His 60th Birthday},
  year      = {2016},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {32--55},
  doi       = {10.1007/978-3-319-30936-1_2},
}

@article{Avron91:hypersequents,
  author  = {Avron, Arnon},
  doi     = {10.1007/BF01531058},
  journal = {Ann. Math. Artif. Intell.},
  note    = {Arnon Avron credits Garrel Pottinger~\citep{Pottinger83:hypersequents} with the first use of hypersequents~(Footnote 3, p.\ 227).},
  pages   = {225--248},
  title   = {Hypersequents, logical consequence and intermediate logics for concurrency},
  volume  = {4},
  year    = {1991},
}

@incollection{Avron96:hypersequents,
  author    = {Avron, Arnon},
  booktitle = {{Logic: from Foundations to Applications: European logic colloquium}},
  doi       = {10.1093/oso/9780198538622.003.0001},
  isbn      = {9780198538622},
  month     = jun,
  publisher = {Oxford University Press},
  title     = {{The Method of Hypersequents in the Proof Theory of Propositional Non-classical Logics}},
  year      = {1996},
}

@article{Baelde12:recll,
  abstract   = {The first-order theory of MALL (multiplicative, additive linear logic) over only equalities is a well-structured but weak logic since it cannot capture unbounded (infinite) behavior. Instead of accounting for unbounded behavior via the addition of the exponentials (! and ?), we add least and greatest fixed point operators. The resulting logic, which we call μMALL, satisfies two fundamental proof theoretic properties: we establish weak normalization for it, and we design a focused proof system that we prove complete with respect to the initial system. That second result provides a strong normal form for cut-free proof structures that can be used, for example, to help automate proof search. We show how these foundations can be applied to intuitionistic logic.},
  address    = {New York, NY, USA},
  articleno  = {2},
  author     = {Baelde, David},
  doi        = {10.1145/2071368.2071370},
  issn       = {1529-3785},
  issue_date = {January 2012},
  journal    = {ACM Trans. Comput. Logic},
  keywords   = {(co)induction, focusing, cut elimination, normalization, linear logic, Fixed points, proof search, recursive definitions},
  month      = jan,
  number     = {1},
  numpages   = {44},
  publisher  = {Association for Computing Machinery},
  title      = {Least and Greatest Fixed Points in Linear Logic},
  volume     = {13},
  year       = {2012},
}

@inproceedings{BalzerTP19:sills,
  abstract  = {Shared session types generalize the Curry-Howard correspondence between intuitionistic linear logic and the session-typed {\$}{\$}{\backslash}pi {\$}{\$}-calculus with adjoint modalities that mediate between linear and shared session types, giving rise to a programming model where shared channels must be used according to a locking discipline of acquire-release. While this generalization greatly increases the range of programs that can be written, the gain in expressiveness comes at the cost of deadlock-freedom, a property which holds for many linear session type systems. In this paper, we develop a type system for logically-shared sessions in which types capture not only the interactive behavior of processes but also constrain the order of resources (i.e., shared processes) they may acquire. This type-level information is then used to rule out cyclic dependencies among acquires and synchronization points, resulting in a system that ensures deadlock-free communication for well-typed processes in the presence of shared sessions, higher-order channel passing, and recursive processes. We illustrate our approach on a series of examples, showing that it rules out deadlocks in circular networks of both shared and linear recursive processes, while still being permissive enough to type concurrent implementations of shared imperative data structures as processes.},
  address   = {Cham},
  author    = {Balzer, Stephanie
               and Toninho, Bernardo
               and Pfenning, Frank},
  booktitle = {Programming Languages and Systems},
  editor    = {Caires, Lu{\'i}s},
  isbn      = {978-3-030-17184-1},
  pages     = {611--639},
  publisher = {Springer International Publishing},
  title     = {Manifest Deadlock-Freedom for Shared Session Types},
  year      = {2019},
}

@techreport{Barber96:dill,
  address     = {Edinburgh, Scotland},
  author      = {Andrew G. Barber},
  institution = {Department of Computer Science, The University of Edinburgh},
  month       = sep,
  title       = {Dual Intuitionistic Linear Logic},
  url         = {http://www.lfcs.inf.ed.ac.uk/reports/96/ECS-LFCS-96-347/},
  year        = {1996},
}

@inproceedings{Barendregt85:lambda,
  author    = {Hendrik Pieter Barendregt},
  booktitle = {Studies in Logic and the Foundations of Mathematics},
  title     = {The lambda calculus - its syntax and semantics},
  url       = {https://api.semanticscholar.org/CorpusID:263892017},
  year      = {1985},
}

@article{BellinS94:pi-calculus,
  address   = {GBR},
  author    = {Bellin, Gianluigi and Scott, Philip J.},
  doi       = {10.1016/0304-3975(94)00104-9},
  issn      = {0304-3975},
  journal   = {Theoretical Computer Science},
  month     = apr,
  number    = {1},
  numpages  = {55},
  pages     = {11–65},
  publisher = {Elsevier Science Publishers Ltd.},
  title     = {On the π-Calculus and Linear Logic},
  volume    = {135},
  year      = {1994},
}

@article{Belnap82:dl,
  author    = {Nuel D. Belnap},
  issn      = {00223611, 15730433},
  journal   = {Journal of Philosophical Logic},
  number    = {4},
  pages     = {375--417},
  publisher = {Springer},
  title     = {Display Logic},
  url       = {http://www.jstor.org/stable/30226258},
  urldate   = {2024-07-12},
  volume    = {11},
  year      = {1982},
}

@article{Belnap89:ll-displayed,
  author    = {Belnap,  Nuel},
  doi       = {10.1305/ndjfl/1093635329},
  issn      = {0029-4527},
  journal   = {Notre Dame Journal of Formal Logic},
  month     = dec,
  number    = {1},
  publisher = {Duke University Press},
  title     = {Linear logic displayed.},
  volume    = {31},
  year      = {1989},
}

@article{BernardyB18:linear-haskell,
  author    = {Jean-Philippe Bernardy and Mathieu Boespflug and Ryan R. Newton and Simon Peyton Jones and Arnaud Spiwack},
  doi       = {10.1145/3158093},
  journal   = {Proc.\ of {POPL}},
  pages     = {1--29},
  publisher = {ACM},
  title     = {Linear Haskell: practical linearity in a higher-order polymorphic language},
  volume    = {2},
  year      = {2018},
}

@article{Blizard88:multiset,
  author    = {Wayne D. Blizard},
  doi       = {10.1305/ndjfl/1093634995},
  journal   = {Notre Dame Journal of Formal Logic},
  number    = {1},
  pages     = {36 -- 66},
  publisher = {Duke University Press},
  title     = {Multiset theory},
  volume    = {30},
  year      = {1988},
}

"Type structure is a syntactic discipline for enforcing levels of abstraction."

@inbook{Boreale96:internal-mobility,
  author    = {Boreale,  Michele},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/3-540-61604-7_54},
  isbn      = {9783540706250},
  issn      = {1611-3349},
  pages     = {163–178},
  publisher = {Springer Berlin Heidelberg},
  title     = {On the expressiveness of internal mobility in name-passing calculi},
  url       = {http://dx.doi.org/10.1007/3-540-61604-7_54},
  year      = {1996},
}

@incollection{CairesP10:pidill,
  author    = {Lu{\'{\i}}s Caires and Frank Pfenning},
  booktitle = {{CONCUR} 2010 - Concurrency Theory},
  doi       = {10.1007/978-3-642-15375-4_16},
  pages     = {222--236},
  publisher = {Springer Berlin Heidelberg},
  title     = {Session Types as Intuitionistic Linear Propositions},
  year      = {2010},
}

@article{CairesPT16:pidill-ext,
  author    = {Lu{\'{\i}}s Caires and Frank Pfenning and Toninho, Bernardo},
  doi       = {10.1017/S0960129514000218},
  journal   = {Mathematical Structures in Computer Science},
  note      = {Journal version of \cite{CairesP10:pidill}},
  number    = {3},
  pages     = {367–423},
  publisher = {Cambridge University Press},
  title     = {Linear logic propositions as session types},
  volume    = {26},
  year      = {2016},
}


@inproceedings{CarboneLMSW16:mcp,
  address   = {Dagstuhl, Germany},
  annote    = {Keywords: Multiparty Session Types, Linear Logic, Propositions as Types},
  author    = {Carbone, Marco and Lindley, Sam and Montesi, Fabrizio and Sch\"{u}rmann, Carsten and Wadler, Philip},
  booktitle = {27th International Conference on Concurrency Theory (CONCUR 2016)},
  doi       = {10.4230/LIPIcs.CONCUR.2016.33},
  editor    = {Desharnais, Jos\'{e}e and Jagadeesan, Radha},
  isbn      = {978-3-95977-017-0},
  issn      = {1868-8969},
  pages     = {33:1--33:15},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  title     = {{Coherence Generalises Duality: A Logical Explanation of Multiparty Session Types}},
  url       = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.CONCUR.2016.33},
  urn       = {urn:nbn:de:0030-drops-61811},
  volume    = {59},
  year      = {2016},
}

@book{Copeland04:turing,
  abstract  = {Alan Turing was one of the most influential thinkers of the 20th
               century. In 1935, aged 22, he developed the mathematical theory
               upon which all subsequent stored-program digital computers are
               modeled. At the outbreak of hostilities with Germany in
               September 1939, he joined the Government Codebreaking team at
               Bletchley Park, Buckinghamshire and played a crucial role in
               deciphering Engima, the code used by the German armed forces to
               protect their radio communications. Turing's work on the version
               of Enigma used by the German navy was vital to the battle for
               supremacy in the North Atlantic. He also contributed to the
               attack on the cyphers known as ``Fish,'' which were used by the
               German High Command for the encryption of signals during the
               latter part of the war. His contribution helped to shorten the
               war in Europe by an estimated two years. After the war, his
               theoretical work led to the development of Britain's first
               computers at the National Physical Laboratory and the Royal
               Society Computing Machine Laboratory at Manchester University.
               Turing was also a founding father of modern cognitive science,
               theorizing that the cortex at birth is an ``unorganized
               machine'' which through ``training'' becomes organized ``into a
               universal machine or something like it.'' He went on to develop
               the use of computers to model biological growth, launching the
               discipline now referred to as Artificial Life. The papers in
               this book are the key works for understanding Turing's
               phenomenal contribution across all these fields. The collection
               includes Turing's declassified wartime ``Treatise on the
               Enigma''; letters from Turing to Churchill and to codebreakers;
               lectures, papers, and broadcasts which opened up the concept of
               AI and its implications; and the paper which formed the genesis
               of the investigation of Artifical Life.},
  address   = {Oxford, England},
  editor    = {Copeland, B. Jack},
  month     = jul,
  note      = {Via~\cite{Wikipedia:HaltingProblem} under History.},
  publisher = {Clarendon Press},
  title     = {The Essential Turing},
  year      = 2004,
}

@article{Dagand14:transporting-across-ornaments,
  author  = {Dagand, Pierre-Évariste and McBride, Conor},
  doi     = {10.1017/S0956796814000069},
  journal = {Journal of Functional Programming},
  number  = {2–3},
  pages   = {316–383},
  title   = {Transporting functions across ornaments},
  volume  = {24},
  year    = {2014},
}

@article{DanosR89:pn,
  author    = {Danos,  Vincent and Regnier,  Laurent},
  doi       = {10.1007/bf01622878},
  issn      = {1432-0665},
  journal   = {Archive for Mathematical Logic},
  month     = oct,
  number    = {3},
  pages     = {181–203},
  publisher = {Springer Science and Business Media LLC},
  title     = {The structure of multiplicatives},
  volume    = {28},
  year      = {1989},
}

@inproceedings{DardhaG18:pcp,
  author    = {Ornela Dardha and
               Simon J. Gay},
  booktitle = {Foundations of Software Science and Computation Structures - 21st
               International Conference, {FOSSACS} 2018, Held as Part of the European
               Joint Conferences on Theory and Practice of Software, {ETAPS} 2018,
               Thessaloniki, Greece, April 14-20, 2018, Proceedings},
  doi       = {10.1007/978-3-319-89366-2_5},
  editor    = {Christel Baier and
               Ugo Dal Lago},
  pages     = {91--109},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  title     = {A New Linear Logic for Deadlock-Free Session-Typed Processes},
  volume    = {10803},
  year      = {2018},
}

@article{DardhaGS17:str,
  author    = {Ornela Dardha and
               Elena Giachino and
               Davide Sangiorgi},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/iandc/DardhaGS17.bib},
  doi       = {10.1016/J.IC.2017.06.002},
  journal   = {Inf. Comput.},
  pages     = {253--286},
  timestamp = {Tue, 21 Mar 2023 21:09:35 +0100},
  title     = {Session types revisited},
  url       = {https://doi.org/10.1016/j.ic.2017.06.002},
  volume    = {256},
  year      = {2017},
}

@misc{Davis52:haltingproblem,
  author = {Martin Davis},
  note   = {Via~\cite{Copeland04:turing}, Footnote 61, p.\ 40.},
  title  = {Lecture at the {Control Systems Laboratory} at the {University of Illinois}},
  year   = {1952},
}

@book{Davis58:unsolvability,
  address   = {New York, USA},
  author    = {Martin Davis},
  keywords  = {Computable functions, Recursive functions, Unsolvability (Mathematical logic)},
  publisher = {McGraw-Hill},
  title     = {Computability \& Unsolvability},
  year      = {1958},
}

@article{Ehrhard05:fs,
  author  = {Ehrhard, Thomas},
  doi     = {10.1017/S0960129504004645},
  journal = {Mathematical Structures in Computer Science},
  number  = {4},
  pages   = {615–646},
  title   = {Finiteness spaces},
  volume  = {15},
  year    = {2005},
}

@article{Ehrhard18:dll,
  author  = {Ehrhard, Thomas},
  doi     = {10.1017/S0960129516000372},
  journal = {Mathematical Structures in Computer Science},
  number  = {7},
  pages   = {995–1060},
  title   = {An introduction to differential linear logic: proof-nets, models and antiderivatives},
  volume  = {28},
  year    = {2018},
}

@article{EhrhardR06:din,
  abstract   = {We introduce interaction nets for a fragment of the differential lambda-calculus and exhibit in this framework a new symmetry between the of course and the why not modalities of linear logic, which is completely similar to the symmetry between the tensor and par connectives of linear logic. We use algebraic intuitions for introducing these nets and their reduction rules, and then we develop two correctness criteria (weak typability and acyclicity) and show that they guarantee strong normalization. Finally, we outline the correspondence between this interaction nets formalism and the resource lambda-calculus.},
  address    = {GBR},
  author     = {Ehrhard, Thomas and Regnier, Laurent},
  doi        = {10.1016/j.tcs.2006.08.003},
  issn       = {0304-3975},
  issue_date = {6 November 2006},
  journal    = {Theoretical Computer Science},
  keywords   = {differential lambda-calculus, linear logic, lambda-calculus with multiplicities, interaction nets, lambda-calculus, resource lambda-calculus},
  month      = nov,
  number     = {2},
  numpages   = {30},
  pages      = {166–195},
  publisher  = {Elsevier Science Publishers Ltd.},
  title      = {Differential Interaction Nets},
  volume     = {364},
  year       = {2006},
}

@inproceedings{Filinski94:monads,
  author    = {Andrzej Filinski},
  booktitle = {Proceedings of the 21st {ACM} {SIGPLAN}-{SIGACT} symposium on Principles of programming languages  - {POPL} {\textquotesingle}94},
  doi       = {10.1145/174675.178047},
  publisher = {{ACM} Press},
  title     = {Representing monads},
  url       = {https://doi.org/10.1145/174675.178047},
  year      = {1994},
}

@phdthesis{Fowler19:thesis,
  author = {Simon Fowler},
  school = {The University of Edinburgh},
  title  = {Typed concurrent functional programming with channels, actors and sessions},
  year   = {2019},
}

@inproceedings{FowlerKDLM21:hgv,
  address   = {Dagstuhl, Germany},
  author    = {Simon Fowler and Wen Kokke and Ornela Dardha and
               J. Garrett Morris and Sam Lindley},
  booktitle = {{32nd International Conference on Concurrency Theory
               (CONCUR 2021)}},
  doi       = {10.4230/LIPIcs.CONCUR.2021.36},
  editor    = {Haddad, Serge and Varacca, Daniele},
  isbn      = {978-3-95977-203-7},
  issn      = {1868-8969},
  pages     = {36:1--36:18},
  publisher = {{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik}},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  title     = {{Separating Sessions Smoothly}},
  volume    = {203},
  year      = {2021},
}

@article{FowlerKDLM23:hgv-ext,
  author   = {Simon Fowler and Wen Kokke and Ornela Dardha and Sam Lindley and J. Garrett Morris},
  doi      = {10.46298/lmcs-19(3:3)2023},
  journal  = {{Logical Methods in Computer Science}},
  keywords = {Computer Science - Programming Languages},
  month    = jul,
  note     = {Journal version of \cite{FowlerKDLM21:hgv}},
  number   = {3},
  title    = {{Separating Sessions Smoothly}},
  volume   = {19},
  year     = {2023},
}

@article{FowlerLMD19:egv,
  author  = {Fowler, Simon and Lindley, Sam and Morris, J. Garrett and Decova, S{\'{a}}ra},
  doi     = {10.1145/3290341},
  journal = {Proc. {ACM} Program. Lang.},
  number  = {{POPL}},
  pages   = {28:1--28:29},
  title   = {Exceptional asynchronous session types: session types without tiers},
  volume  = {3},
  year    = {2019},
}

@article{FruminDHP22:bunched-sessions,
  abstract   = {The emergence of propositions-as-sessions, a Curry-Howard correspondence between propositions of Linear Logic and session types for concurrent processes, has settled the logical foundations of message-passing concurrency. Central to this approach is the resource consumption paradigm heralded by Linear Logic. In this paper, we investigate a new point in the design space of session type systems for message-passing concurrent programs. We identify O’Hearn and Pym’s Logic of Bunched Implications (BI) as a fruitful basis for an interpretation of the logic as a concurrent programming language. This leads to a treatment of non-linear resources that is radically different from existing approaches based on Linear Logic. We introduce a new π-calculus with sessions, called πBI; its most salient feature is a construct called spawn, which expresses new forms of sharing that are induced by structural principles in BI. We illustrate the expressiveness of πBI and lay out its fundamental theory: type preservation, deadlock-freedom, and weak normalization results for well-typed processes; an operationally sound and complete typed encoding of an affine λ-calculus; and a non-interference result for access of resources.},
  address    = {New York, NY, USA},
  articleno  = {155},
  author     = {Frumin, Dan and D’Osualdo, Emanuele and van den Heuvel, Bas and P\'{e}rez, Jorge A.},
  doi        = {10.1145/3563318},
  issue_date = {October 2022},
  journal    = {Proc. ACM Program. Lang.},
  keywords   = {Curry-Howard correspondence, bunched implications, concurrency, session types},
  month      = {oct},
  number     = {OOPSLA2},
  numpages   = {29},
  publisher  = {Association for Computing Machinery},
  title      = {A bunch of sessions: a propositions-as-sessions interpretation of bunched implications in channel-based concurrency},
  url        = {https://doi.org/10.1145/3563318},
  volume     = {6},
  year       = {2022},
}

@article{GayV10:last,
  abstract   = {Session types support a type-theoretic formulation of structured patterns of communication, so that the communication behaviour of agents in a distributed system can be verified by static typechecking. Applications include network protocols, business processes and operating system services. In this paper we define a multithreaded functional language with session types, which unifies, simplifies and extends previous work. There are four main contributions. First is an operational semantics with buffered channels, instead of the synchronous communication of previous work. Second, we prove that the session type of a channel gives an upper bound on the necessary size of the buffer. Third, session types are manipulated by means of the standard structures of a linear type theory, rather than by means of new forms of typing judgement. Fourth, a notion of subtyping, including the standard subtyping relation for session types (imported into the functional setting), and a novel form of subtyping between standard and linear function types, which allows the typechecker to handle linear types conveniently. Our new approach significantly simplifies session types in the functional setting, clarifies their essential features and provides a secure foundation for language developments such as polymorphism and object-orientation.},
  address    = {USA},
  author     = {Gay, Simon J. and Vasconcelos, Vasco T.},
  doi        = {10.1017/S0956796809990268},
  issn       = {0956-7968},
  issue_date = {January 2010},
  journal    = {Journal of Functional Programming},
  month      = jan,
  number     = {1},
  numpages   = {32},
  pages      = {19–50},
  publisher  = {Cambridge University Press},
  title      = {Linear Type Theory for Asynchronous Session Types},
  volume     = {20},
  year       = {2010},
}

@article{Gentzen35:sq-1,
  author    = {Gentzen,  Gerhard},
  doi       = {10.1007/bf01201353},
  issn      = {1432-1823},
  journal   = {Mathematische Zeitschrift},
  month     = dec,
  number    = {1},
  pages     = {176–210},
  publisher = {Springer Science and Business Media LLC},
  title     = {Untersuchungen {\"U}ber das logische Schlie{\ss}en. I},
  volume    = {39},
  year      = {1935},
}

@article{Gentzen35:sq-2,
  author    = {Gentzen,  Gerhard},
  doi       = {10.1007/bf01201363},
  issn      = {1432-1823},
  journal   = {Mathematische Zeitschrift},
  month     = dec,
  number    = {1},
  pages     = {405–431},
  publisher = {Springer Science and Business Media LLC},
  title     = {Untersuchungen {\"U}ber das logische Schlie{\ss}en. II},
  volume    = {39},
  year      = {1935},
}

@article{Girard87:ll,
  author  = {Jean{-}Yves Girard},
  journal = {Theoretical Computer Science},
  pages   = {1--102},
  title   = {Linear Logic},
  volume  = {50},
  year    = {1987},
}

@inproceedings{GirardL87:ill,
  abstract  = {Recently, J.Y. Girard discovered that usual logical connectors such as ⇒ (implication) could be broken up into more elementary linear connectors. This provided a new linear logic [Girard86] where hypothesis are (in some sense) used once and only once. The most surprising is that all the power of the usual logic can be recovered by means of recursive logical operators (connector ``of course'').},
  address   = {Berlin, Heidelberg},
  author    = {Girard, J. Y.
               and Lafont, Y.},
  booktitle = {TAPSOFT '87},
  editor    = {Ehrig, Hartmut
               and Kowalski, Robert
               and Levi, Giorgio
               and Montanari, Ugo},
  isbn      = {978-3-540-47717-4},
  pages     = {52--66},
  publisher = {Springer Berlin Heidelberg},
  title     = {Linear logic and lazy computation},
  year      = {1987},
}

@incollection{GirardLR95:ll,
  author    = {Jean{-}Yves Girard},
  booktitle = {Advances in Linear Logic},
  editor    = {Jean{-}Yves Girard and Yves Lafont and Laurent Regnier},
  pages     = {222--1},
  publisher = {Cambridge University Press},
  title     = {Linear Logic: Its Syntax and Semantics},
  year      = {1995},
}

@book{GirardTL89:proofs,
  address   = {USA},
  author    = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
  isbn      = {0521371813},
  publisher = {Cambridge University Press},
  title     = {Proofs and Types},
  year      = {1989},
}

@article{Guglielmi07:sis,
  abstract   = {This article introduces a logical system, called BV, which extends multiplicative linear logic by a noncommutative self-dual logical operator. This extension is particularly challenging for the sequent calculus, and so far, it is not achieved therein. It becomes very natural in a new formalism, called the calculus of structures, which is the main contribution of this work. Structures are formulas subject to certain equational laws typical of sequents. The calculus of structures is obtained by generalizing the sequent calculus in such a way that a new top-down symmetry of derivations is observed, and it employs inference rules that rewrite inside structures at any depth. These properties, in addition to allowing the design of BV, yield a modular proof of cut elimination.},
  address    = {New York, NY, USA},
  author     = {Guglielmi, Alessio},
  doi        = {10.1145/1182613.1182614},
  issn       = {1529-3785},
  issue_date = {January 2007},
  journal    = {ACM Trans. Comput. Logic},
  keywords   = {Calculus of structures, cut elimination, deep inference, linear logic, mix rule, noncommutativity, pomset logic, self-duality, symmetry},
  month      = {jan},
  number     = {1},
  numpages   = {64},
  pages      = {1–es},
  publisher  = {Association for Computing Machinery},
  title      = {A system of interaction and structure},
  volume     = {8},
  year       = {2007},
}

@inproceedings{Honda93:session,
  abstract  = {We formulate a typed formalism for concurrency where types denote freely composable structure of dyadic interaction in the symmetric scheme. The resulting calculus is a typed reconstruction of name passing process calculi. Systems with both the explicit and implicit typing disciplines, where types form a simple hierarchy of types, are presented, which are proved to be in accordance with each other. A typed variant of bisimilarity is formulated and it is shown that typed $\beta$-equality has a clean embedding in the bisimilarity. Name reference structure induced by the simple hierarchy of types is studied, which fully characterises the typable terms in the set of untyped terms. It turns out that the name reference structure results in the deadlock-free property for a subset of terms with a certain regular structure, showing behavioural significance of the simple type discipline.},
  address   = {Berlin, Heidelberg},
  author    = {Honda, Kohei},
  booktitle = {CONCUR'93},
  editor    = {Best, Eike},
  isbn      = {978-3-540-47968-0},
  pages     = {509--523},
  publisher = {Springer Berlin Heidelberg},
  title     = {Types for dyadic interaction},
  year      = {1993},
}

@article{HondaL10:pn,
  abstract = {This paper presents an exact correspondence in typing and dynamics between polarised linear logic and a typed π-calculus based on IO-typing. The respective incremental constraints, one on geometric structures of proof-nets and one based on types, precisely correspond to each other, leading to the exact correspondence of the respective formalisms as they appear in Olivier Laurent (2003) [27] (for proof-nets) and Kohei Honda et al. (2004) [24] (for the π-calculus).},
  author   = {Kohei Honda and Olivier Laurent},
  doi      = {https://doi.org/10.1016/j.tcs.2010.01.028},
  issn     = {0304-3975},
  journal  = {Theoretical Computer Science},
  keywords = {Pi-calculus, Proof-nets, Processes, Logics, Proofs, Types, Interaction, Concurrency, Linear Logic, Polarity, Embedding, Determinism, Non-determinism},
  number   = {22},
  pages    = {2223-2238},
  title    = {An exact correspondence between a typed pi-calculus and polarised proof-nets},
  volume   = {411},
  year     = {2010},
}


@inproceedings{HondaVK98:session,
  abstract  = {We introduce basic language constructs and a type discipline as a foundation of structured communication-based concurrent programming. The constructs, which are easily translatable into the summation-less asynchronous $\pi$-calculus, allow programmers to organise programs as a combination of multiple flows of (possibly unbounded) reciprocal interactions in a simple and elegant way, subsuming the preceding communication primitives such as method invocation and rendez-vous. The resulting syntactic structure is exploited by a type discipline {\`a} la ML, which offers a high-level type abstraction of interactive behaviours of programs as well as guaranteeing the compatibility of interaction patterns between processes in a well-typed program. After presenting the formal semantics, the use of language constructs is illustrated through examples, and the basic syntactic results of the type discipline are established. Implementation concerns are also addressed.},
  address   = {Berlin, Heidelberg},
  author    = {Honda, Kohei and Vasconcelos, Vasco T. and Kubo, Makoto},
  booktitle = {Programming Languages and Systems},
  editor    = {Hankin, Chris},
  isbn      = {978-3-540-69722-0},
  pages     = {122--138},
  publisher = {Springer Berlin Heidelberg},
  title     = {Language primitives and type discipline for structured communication-based programming},
  year      = {1998},
}

@book{Kleene52:metamath,
  author    = {Kleene, Stephen Cole},
  month     = jan,
  note      = {Via Wikipedia~\cite{Wikipedia:HaltingProblem} under History},
  publisher = {D. Van Nostrand Company, Inc.},
  title     = {Introduction to Metamathematics},
  year      = {1952},
}

@inbook{Kobayashi06:priorities,
  author    = {Kobayashi,  Naoki},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/11817949_16},
  isbn      = {9783540373773},
  issn      = {1611-3349},
  pages     = {233–247},
  publisher = {Springer Berlin Heidelberg},
  title     = {A New Type System for Deadlock-Free Processes},
  url       = {http://dx.doi.org/10.1007/11817949_16},
  year      = {2006},
}

@inproceedings{KobayashiPT96:linearpi,
  abstract  = {The economy and flexibility of the pi-calculus make it attractive both as an object of theoretical study and as a basis for concurrent language design and implementation. However, such generality has a cost: encoding higher-level features like functional computation in pi-calculus throws away potentially useful information. We show how a linear type system can be used to recover important static information about a process's behaviour. In particular, we can guarantee that two processes communicating over a linear channel cannot interfere with other communicating processes. This enables more aggressive optimisation of communications over linear channels and allows useful refinements to the usual notions of process equivalence for pi-calculus.After developing standard results such as soundness of typing, we focus on equivalences, adapting the standard notion of barbed bisimulation to the linear setting and showing how reductions on linear channels induce a useful "partial confluence" of process behaviors.},
  address   = {New York, NY, USA},
  author    = {Kobayashi, Naoki and Pierce, Benjamin C. and Turner, David N.},
  booktitle = {Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  doi       = {10.1145/237721.237804},
  isbn      = {0897917693},
  location  = {St. Petersburg Beach, Florida, USA},
  numpages  = {14},
  pages     = {358–371},
  publisher = {Association for Computing Machinery},
  series    = {POPL '96},
  title     = {Linearity and the pi-calculus},
  year      = {1996},
}

@mastersthesis{Kokke17:msccpnd,
  abstract = {Process calculi based in logic, such as {\textpi DILL} and CP,
              provide a foundation for deadlock-free concurrent programming,
              but at the cost of excluding non-determinism and races. We
              introduce $CD_{NP}$, which extends CP with a novel account of
              non-determinism. Our approach draws on bounded linear logic to
              provide a strongly-typed account of standard process calculus
              expressions of non-determinism. We show that our extension is
              expressive enough to capture many uses of non-determinism in
              untyped calculi, such as non-deterministic choice, while
              preserving CP's meta-theoretic properties, including deadlock
              freedom.},
  author   = {Wen Kokke},
  month    = aug,
  school   = {University of Edinburgh},
  title    = {{Races in Classical Linear Logic}},
  type     = {Master's thesis},
  year     = {2017},
}

@article{Kokke19:sesh,
  abstract  = {Rusty Variation (RV) is a library for session-typed communication
               in Rust which offers strong compile-time correctness
               guarantees. Programs written using RV are guaranteed to
               respect a specified protocol, and are guaranteed to be free
               from deadlocks and races.},
  author    = {Wen Kokke},
  doi       = {10.4204/eptcs.304.4},
  issn      = {2075-2180},
  journal   = {{Electronic Proceedings in Theoretical Computer Science}},
  month     = sep,
  note      = {Renamed to Sesh},
  pages     = {48–60},
  publisher = {Open Publishing Association},
  title     = {{{Rusty Variation}: Deadlock-free Sessions with Failure in {Rust}}},
  volume    = {304},
  year      = {2019},
}

@inproceedings{KokkeD21:pgv,
  abstract  = {Binary session types guarantee communication safety and session fidelity, but alone they cannot rule out deadlocks arising from the interleaving of different sessions. In Classical Processes (CP) [53]---a process calculus based on classical linear logic---deadlock freedom is guaranteed by combining channel creation and parallel composition under the same logical cut rule. Similarly, in Good Variation (GV) [39, 54]---a linear concurrent {\$}{\$}{\backslash}lambda {\$}{\$}$\lambda$-calculus---deadlock freedom is guaranteed by combining channel creation and thread spawning under the same operation, called fork. In both CP and GV, deadlock freedom is achieved at the expense of expressivity, as the only processes allowed are tree-structured. Dardha and Gay [19] define Priority CP (PCP), which allows cyclic-structured processes and restores deadlock freedom by using priorities, in line with Kobayashi and Padovani [34, 44]. Following PCP, we present Priority GV (PGV), a variant of GV which decouples channel creation from thread spawning. Consequently, we type cyclic-structured processes and restore deadlock freedom by using priorities. We show that our type system is sound by proving subject reduction and progress. We define an encoding from PCP to PGV and prove that the encoding preserves typing and is sound and complete with respect to the operational semantics.},
  address   = {Cham},
  author    = {Kokke, Wen and Dardha, Ornela},
  booktitle = {Formal Techniques for Distributed Objects, Components, and Systems},
  editor    = {Peters, Kirstin and Willemse, Tim A. C.},
  isbn      = {978-3-030-78089-0},
  month     = feb,
  pages     = {100--119},
  publisher = {Springer International Publishing},
  title     = {Prioritise the Best Variation},
  year      = {2021},
}

@inproceedings{KokkeD21:priority-sesh,
  abstract  = {Priority Sesh is a library for session-typed communication in Linear Haskell which offers strong compile-time correctness guarantees. Priority Sesh offers two deadlock-free APIs for session-typed communication. The first guarantees deadlock freedom by restricting the process structure to trees and forests. It is simple and composeable, but rules out cyclic structures. The second guarantees deadlock freedom via priorities, which allows the programmer to safely use cyclic structures as well.  Our library relies on Linear Haskell to guarantee linearity, which leads to easy-to-write session types and more idiomatic code, and lets us avoid the complex encodings of linearity in the Haskell type system that made previous libraries difficult to use.},
  address   = {New York, NY, USA},
  author    = {Kokke, Wen and Dardha, Ornela},
  booktitle = {Proceedings of the 14th ACM SIGPLAN International Symposium on Haskell},
  doi       = {10.1145/3471874.3472979},
  isbn      = {9781450386159},
  keywords  = {deadlock freedom, session types, linear haskell},
  location  = {Virtual, Republic of Korea},
  numpages  = {13},
  pages     = {1–13},
  publisher = {Association for Computing Machinery},
  series    = {Haskell 2021},
  title     = {Deadlock-Free Session Types in Linear Haskell},
  year      = {2021},
}

@article{KokkeD23:pgv-ext,
  author  = {Wen Kokke and Ornela Dardha},
  doi     = {10.46298/lmcs-19(4:28)2023},
  journal = {{Logical Methods in Computer Science}},
  month   = dec,
  note    = {Journal version of \cite{KokkeD21:pgv}},
  title   = {{Prioritise the Best Variation}},
  volume  = {{Volume 19, Issue 4}},
  year    = {2023},
}

@article{KokkeMP19:dhcp,
  author  = {Wen Kokke and Fabrizio Montesi and Marco Peressotti},
  doi     = {10.1145/3290337},
  journal = {{Proceedings of the {ACM} on Programming Languages}},
  month   = jan,
  number  = {{POPL}},
  title   = {{Better Late Than Never: A fully-abstract semantics for
             Classical Processes}},
  volume  = {3},
  year    = {2019},
}

@inproceedings{KokkeMP19:hcp,
  author    = {Wen Kokke and Fabrizio Montesi and Marco Peressotti},
  booktitle = {{Proceedings Joint International Workshop on Linearity
               \& Trends in Linear Logic and Applications},
               {Oxford, UK, 7-8 July 2018}},
  doi       = {10.4204/EPTCS.292.5},
  editor    = {Ehrhard, Thomas and Fern\'andez, Maribel and Paiva,
               Valeria de and Tortora de Falco, Lorenzo},
  month     = apr,
  note      = {Version with errata: \href{https://web.archive.org/web/20240413021337/https://marcoperessotti.com/files/papers/KMP18-revised.pdf}{https://marcoperessotti.com/files/papers/KMP18-revised.pdf}.},
  pages     = {90-103},
  publisher = {Open Publishing Association},
  series    = {Electronic Proceedings in Theoretical Computer Science},
  title     = {{Taking Linear Logic Apart}},
  volume    = {292},
  year      = {2019},
}

@inproceedings{KokkeMW19:cpnd,
  abstract  = {Process calculi based in logic, such as πDILL and CP, provide a
               foundation for deadlock-free concurrent programming, but
               exclude non-determinism and races. HCP is a reformulation of
               CP which addresses a fundamental shortcoming: the fundamental
               operator for parallel composition from the π-calculus does not
               correspond to any rule of linear logic, and therefore not to
               any term construct in CP. We introduce HCPND, which extends
               HCP with a novel account of non-determinism. Our approach
               draws on bounded linear logic to provide a strongly-typed
               account of standard process calculus expressions of
               non-determinism. We show that our extension is expressive
               enough to capture many uses of non-determinism in untyped
               calculi, such as non-deterministic choice, while preserving
               HCP's meta-theoretic properties, including deadlock freedom.},
  author    = {Wen Kokke and J. Garrett Morris and Philip Wadler},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/978-3-030-22397-7_3},
  editor    = {Hanne Riis Nielson and Emilio Tuosto},
  month     = jun,
  note      = {The COORDINATION version has errors, which are fixed here},
  pages     = {37--53},
  publisher = {Springer International Publishing},
  title     = {{Towards Races in Linear Logic}},
  url       = {https://wen.works/assets/pubs/coordination2019.pdf},
  year      = {2019},
}

@article{KokkeMW20:cpnd-ext,
  abstract = {Process calculi based in logic, such as 𝜋DILL and CP, provide a
              foundation for deadlock-free concurrent programming, but
              exclude non-determinism and races. HCP is a reformulation of
              CP which addresses a fundamental shortcoming: the fundamental
              operator for parallel composition from the 𝜋-calculus does not
              correspond to any rule of linear logic, and therefore not to
              any term construct in CP. We introduce non-deterministic HCP,
              which extends HCP with a novel account of non-determinism. Our
              approach draws on bounded linear logic to provide a
              strongly-typed account of standard process calculus
              expressions of non-determinism. We show that our extension is
              expressive enough to capture many uses of non-determinism in
              untyped calculi, such as non-deterministic choice, while
              preserving HCP's meta-theoretic properties, including deadlock
              freedom.},
  author   = {Kokke, Wen and Morris, J. Garrett and Wadler, Philip},
  journal  = {{Logical Methods in Computer Science}},
  month    = dec,
  note     = {Extended version of \cite{KokkeMW19:cpnd}.},
  title    = {{Towards Races in Linear Logic}},
  url      = {https://lmcs.episciences.org/6979},
  volume   = {{Volume 16, Issue 4}},
  year     = 2020,
}

@techreport{Lea95:sessions,
  author      = {Doug Lea},
  institution = {State University of New York},
  title       = {Sessions},
  url         = {https://gee.cs.oswego.edu/dl/pats/session.html},
  year        = {1995},
}

@inbook{LevyM99:wes,
  author    = {Lévy,  Jean-Jacques and Maranget,  Luc},
  booktitle = {Foundations of Software Technology and Theoretical Computer Science},
  doi       = {10.1007/3-540-46691-6_14},
  isbn      = {9783540466918},
  issn      = {0302-9743},
  pages     = {181–200},
  publisher = {Springer Berlin Heidelberg},
  title     = {Explicit Substitutions and Programming Languages},
  url       = {http://dx.doi.org/10.1007/3-540-46691-6_14},
  year      = {1999},
}

@inproceedings{LindleyM14:sap,
  author    = {Sam Lindley and
               J. Garrett Morris},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/corr/LindleyM14.bib},
  booktitle = {Proceedings 7th Workshop on Programming Language Approaches to Concurrency
               and Communication-cEntric Software, {PLACES} 2014, Grenoble, France,
               12 April 2014},
  doi       = {10.4204/EPTCS.155.2},
  editor    = {Alastair F. Donaldson and
               Vasco T. Vasconcelos},
  pages     = {9--16},
  series    = {{EPTCS}},
  timestamp = {Sat, 30 Sep 2023 10:07:59 +0200},
  title     = {Sessions as Propositions},
  url       = {https://doi.org/10.4204/EPTCS.155.2},
  volume    = {155},
  year      = {2014},
}

@inproceedings{LindleyM15:gv,
  abstract  = {Session types provide a static guarantee that concurrent programs respect communication protocols. Recently, Caires, Pfenning, and Toninho, and Wadler, have developed a correspondence between propositions of linear logic and session typed $\pi$-calculus processes. We relate the cut-elimination semantics of this approach to an operational semantics for session-typed concurrency in a functional language. We begin by presenting a variant of Wadler's session-typed core functional language, GV. We give a small-step operational semantics for GV. We develop a suitable notion of deadlock, based on existing approaches for capturing deadlock in $\pi$-calculus, and show that all well-typed GV programs are deadlock-free, deterministic, and terminating. We relate GV to linear logic by giving translations between GV and CP, a process calculus with a type system and semantics based on classical linear logic. We prove that both directions of our translation preserve reduction; previous translations from GV to CP, in contrast, failed to preserve $\beta$-reduction. Furthermore, to demonstrate the modularity of our approach, we define two extensions of GV which preserve deadlock-freedom, determinism, and termination.},
  address   = {Berlin, Heidelberg},
  author    = {Lindley, Sam
               and Morris, J. Garrett},
  booktitle = {Programming Languages and Systems},
  doi       = {10.1007/978-3-662-46669-8_23},
  editor    = {Vitek, Jan},
  isbn      = {978-3-662-46669-8},
  pages     = {560--584},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Semantics for Propositions as Sessions},
  year      = {2015},
}

@inproceedings{LindleyM16:esh,
  abstract  = {We present a novel embedding of session-typed concurrency in Haskell. We extend an existing HOAS embedding of linear λ-calculus with a set of core session-typed primitives, using indexed type families to express the constraints of the session typing discipline. We give two interpretations of our embedding, one in terms of GHC’s built-in concurrency and another in terms of purely functional continuations. Our safety guarantees, including deadlock freedom, are assured statically and introduce no additional runtime overhead.},
  address   = {New York, NY, USA},
  author    = {Lindley, Sam and Morris, J. Garrett},
  booktitle = {Proceedings of the 9th International Symposium on Haskell},
  doi       = {10.1145/2976002.2976018},
  isbn      = {9781450344340},
  keywords  = {session types, linear types, embedded languages},
  location  = {Nara, Japan},
  numpages  = {13},
  pages     = {133–145},
  publisher = {Association for Computing Machinery},
  series    = {Haskell 2016},
  title     = {Embedding session types in Haskell},
  year      = {2016},
}

@inproceedings{LindleyM16:recgv,
  author    = {Sam Lindley and J. Garrett Morris},
  booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} International Conference on Functional Programming},
  doi       = {10.1145/2951913.2951921},
  month     = sep,
  publisher = {{ACM}},
  title     = {Talking bananas: structural recursion for session types},
  year      = {2016},
}

@inbook{LindleyM17:fst,
  author    = {Sam Lindley and J. Garrett Morris},
  title     = {Lightweight Functional Session Types},
  booktitle = {Behavioural Types: from Theory to Tools},
  year      = {2017},
  publisher = {River Publisher},
  pages     = {265-286},
  doi       = {10.13052/rp-9788793519817},
}

@misc{MarlowEtAl10:haskell,
  title  = {Haskell 2010 language report},
  author = {Marlow, Simon and others},
  howpublished   = {Available online \url{https://www.haskell.org/onlinereport/haskell2010/}},
  year   = {2010},
  note   = {Available online \url{https://www.haskell.org/onlinereport/haskell2010/}},
}

@article{MatsakisK14:rust,
  abstract   = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety.Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
  address    = {New York, NY, USA},
  author     = {Matsakis, Nicholas D. and Klock, Felix S.},
  doi        = {10.1145/2692956.2663188},
  issn       = {1094-3641},
  issue_date = {December 2014},
  journal    = {Ada Lett.},
  keywords   = {systems programming, rust, memory management, affine type systems},
  month      = {oct},
  number     = {3},
  numpages   = {2},
  pages      = {103–104},
  publisher  = {Association for Computing Machinery},
  title      = {The rust language},
  url        = {https://doi.org/10.1145/2692956.2663188},
  volume     = {34},
  year       = {2014},
}

@article{Mazza18:confusion-free,
  author  = {Mazza, Damiano},
  doi     = {10.1017/S0960129516000402},
  journal = {Mathematical Structures in Computer Science},
  number  = {7},
  pages   = {1097–1125},
  title   = {The true concurrency of differential interaction nets},
  volume  = {28},
  year    = {2018},
}

@article{McBride10:ornaments,
  author  = {McBride, Conor},
  journal = {Journal of functional programming},
  title   = {Ornamental algebras, algebraic ornaments},
  volume  = {47},
  year    = {2010},
}

@inbook{Mellies04:ribbon,
  author     = {Melliès, Paul-André},
  title      = {A Topological Correctness Criterion for Multiplicative Non-Commutative Logic},
  booktitle  = {Linear Logic in Computer Science},
  year       = {2004},
  publisher  = {Cambridge University Press},
  address    = {Cambridge},
  pages      = {283–322},
}

@article{Milner78:types,
  abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm W which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if W accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on W is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system.},
  author   = {Robin Milner},
  doi      = {10.1016/0022-0000(78)90014-4},
  issn     = {0022-0000},
  journal  = {Journal of Computer and System Sciences},
  number   = {3},
  pages    = {348-375},
  title    = {A theory of type polymorphism in programming},
  volume   = {17},
  year     = {1978},
}

@techreport{Milner91:polypi,
  author      = {Robin Milner},
  institution = {The University of Edinburgh},
  title       = {The Polyadic pi-Calculus: A Tutorial},
  url         = {http://www.lfcs.inf.ed.ac.uk/reports/91/ECS-LFCS-91-180/},
  year        = {1991},
}

@article{MilnerPW92:pi-1,
  abstract = {We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.},
  author   = {Robin Milner and Joachim Parrow and David Walker},
  doi      = {10.1016/0890-5401(92)90008-4},
  issn     = {0890-5401},
  journal  = {Information and Computation},
  number   = {1},
  pages    = {1-40},
  title    = {A calculus of mobile processes, I},
  volume   = {100},
  year     = {1992},
}

@article{MilnerPW92:pi-2,
  abstract = {This is the second of two papers in which we present the π-calculus, a calculus of mobile processes. We provide a detailed presentation of some of the theory of the calculus developed to date, and in particular we establish most of the results stated in the companion paper.},
  author   = {Robin Milner and Joachim Parrow and David Walker},
  doi      = {10.1016/0890-5401(92)90009-5},
  issn     = {0890-5401},
  journal  = {Information and Computation},
  number   = {1},
  pages    = {41-77},
  title    = {A calculus of mobile processes, II},
  volume   = {100},
  year     = {1992},
}

@misc{Montesi18:chop,
  archiveprefix = {arXiv},
  author        = {Fabrizio Montesi},
  eprint        = {1802.02917},
  primaryclass  = {cs.LO},
  title         = {Classical Higher-Order Processes},
  url           = {https://arxiv.org/abs/1802.02917},
  year          = {2018},
}

@article{MontesiP:piLL,
  author  = {Fabrizio Montesi and
             Marco Peressotti},
  journal = {CoRR},
  title   = {Linear Logic, the {\(\pi\)}-calculus, and their Metatheory: {A} Recipe
             for Proofs as Processes},
  url     = {https://arxiv.org/abs/2106.11818},
  volume  = {abs/2106.11818},
  year    = {2021},
}

@techreport{MontesiP18:ct,
  address       = {Odense, Denmark},
  archiveprefix = {arXiv},
  author        = {Fabrizio Montesi and Marco Peressotti},
  eprint        = {1803.01049},
  institution   = {University of Southern Denmark},
  primaryclass  = {cs.LO},
  title         = {Classical Transitions},
  year          = {2018},
}

@article{OrchardY17:st,
  author    = {Orchard, Dominic and Yoshida, Nobuko},
  journal   = {Behavioural Types: from Theory to Tools},
  pages     = {219},
  publisher = {River Publishers},
  title     = {Session types with linearity in {Haskell}},
  year      = {2017},
}

@inproceedings{Padovani14:priorites,
  author     = {Padovani,  Luca},
  booktitle  = {Proceedings of the Joint Meeting of the Twenty-Third EACSL Annual Conference on Computer Science Logic (CSL) and the Twenty-Ninth Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)},
  collection = {CSL-LICS ’14},
  doi        = {10.1145/2603088.2603116},
  month      = jul,
  publisher  = {ACM},
  series     = {CSL-LICS ’14},
  title      = {Deadlock and lock freedom in the linear π-calculus},
  url        = {http://dx.doi.org/10.1145/2603088.2603116},
  year       = {2014},
}

@inproceedings{PadovaniN15:dfhop,
  abstract  = {Type systems for communicating processes are typically studied using abstract models -- e.g., process algebras -- that distill the communication behavior of programs but overlook their structure in terms of functions, methods, objects, modules. It is not always obvious how to apply these type systems to structured programming languages. In this work we port a recently developed type system that ensures deadlock freedom in the $\pi$-calculus to a higher-order language.},
  address   = {Cham},
  author    = {Padovani, Luca
               and Novara, Luca},
  booktitle = {Formal Techniques for Distributed Objects, Components, and Systems},
  doi       = {10.1007/978-3-319-19195-9_1},
  editor    = {Graf, Susanne
               and Viswanathan, Mahesh},
  isbn      = {978-3-319-19195-9},
  pages     = {3--18},
  publisher = {Springer International Publishing},
  title     = {Types for Deadlock-Free Higher-Order Programs},
  year      = {2015},
}

@article{Pottinger83:hypersequents,
  author  = {Pottinger, Garrel},
  journal = {Journal of Symbolic Logic},
  note    = {(In the notes for the {Annual Meeting of the Association for Symbolic Logic}, {Philadelphia}, 1981.)},
  number  = {3},
  pages   = {900},
  title   = {Uniform, cut-free formulations of T, S4 and S5},
  volume  = {48},
  year    = {1983},
}
@article{Qian21:llnd,
  abstract   = {We introduce coexponentials, a new set of modalities for Classical Linear Logic. As duals to exponentials, the coexponentials codify a distributed form of the structural rules of weakening and contraction. This makes them a suitable logical device for encapsulating the pattern of a server receiving requests from an arbitrary number of clients on a single channel. Guided by this intuition we formulate a system of session types based on Classical Linear Logic with coexponentials, which is suited to modelling client-server interactions. We also present a session-typed functional programming language for client-server programming, which we translate to our system of coexponentials.},
  address    = {New York, NY, USA},
  articleno  = {62},
  author     = {Qian, Zesen and Kavvos, G. A. and Birkedal, Lars},
  doi        = {10.1145/3473567},
  issue_date = {August 2021},
  journal    = {Proceedings of the ACM on Programming Languages},
  keywords   = {client-server architecture, linear logic, coexponential modality, session types, Curry-Howard, pi-calculus, propositions as sessions},
  month      = aug,
  note       = {Expanded on in Qian's Ph.D.\ thesis~\citep{Qian23:dip}.},
  number     = {ICFP},
  numpages   = {31},
  publisher  = {Association for Computing Machinery},
  title      = {Client-Server Sessions in Linear Logic},
  volume     = {5},
  year       = {2021},
}

@phdthesis{Qian23:dip,
  author    = {Zesen Qian},
  language  = {English},
  month     = jan,
  school    = {{\AA}rhus Universitet},
  title     = {Concurrency And Races In Classical Linear Logic},
  year      = {2023},
}

@incollection{Retore21:pomset,
  author    = {Christian Retor{\'{e}}},
  booktitle = {Joachim Lambek: The Interplay of Mathematics,  Logic,  and Linguistics},
  doi       = {10.1007/978-3-030-66545-6_9},
  pages     = {299--345},
  publisher = {Springer International Publishing},
  title     = {Pomset Logic},
  year      = {2021},
}

@incollection{Retore97:pomset,
  author    = {Christian Retor{\'{e}}},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/3-540-62688-3_43},
  pages     = {300--318},
  publisher = {Springer Berlin Heidelberg},
  title     = {Pomset logic: A non-commutative extension of classical linear logic},
  year      = {1997},
}

@incollection{Reynolds74:types,
  author    = {John C. Reynolds},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/3-540-06859-7_148},
  pages     = {408--425},
  publisher = {Springer Berlin Heidelberg},
  title     = {Towards a theory of type structure},
  year      = {1974},
}

@inproceedings{Reynolds83:types,
  author    = {Reynolds, John C},
  booktitle = {Information Processing 83, Proceedings of the IFIP 9th World Computer Congres},
  pages     = {513--523},
  title     = {Types, abstraction and parametric polymorphism},
  year      = {1983},
}

@book{Russel03:principles,
  author    = {Bertrand Russel},
  location  = {Cambridge},
  publisher = {Cambridge University Press},
  title     = {The Principles of Mathematics},
  year      = {1903},
}

@article{Sangiorgi96:internal-mobility,
  abstract = {The π-calculus is a process algebra which originates from CCS and permits a natural modelling of mobility (i.e., dynamic reconfigurations of the process linkage) using communication of names. Previous research has shown that the π-calculus has a much greater expressiveness than CCS, but it also has a much more complex mathematical theory. The primary goal of this work is to understand the reasons for this gap. Another goal is to compare the expressiveness of name-passing calculi, i.e., calculi like π-calculus where mobility is achieved via exchange of names, and that of agent-passing calculi, i.e., calculi where mobility is achieved via exchange of agents. We divide the mobility mechanisms of the π-calculus into internal and external mobility mechanisms. The study of the subcalculus which only uses internal mobility, called πI, suggests that internal mobility is responsible for much of the expressiveness of the π-calculus, whereas external mobility is responsible for many of the semantic complications. A pleasant property of πI is the full symmetry between input and output constructs. Internal mobility is strongly related to agent-passing mobility. By imposing bounds on the order of the types of πI and of the Higher-Order π-calculus (Sangiorgi, 1992) we define a hierarchy of name-passing calculi based on internal mobility and one of agent-passing calculi. We show that there is an exact correspondence, in terms of expressiveness, between the two hierarchies.},
  author   = {Davide Sangiorgi},
  doi      = {10.1016/0304-3975(96)00075-8},
  issn     = {0304-3975},
  journal  = {Theoretical Computer Science},
  number   = {1},
  pages    = {235-274},
  title    = {π-Calculus, internal mobility, and agent-passing calculi},
  volume   = {167},
  year     = {1996},
}

@book{SangiorgiW03:pi,
  address   = {Cambridge, England},
  author    = {Sangiorgi, Davide and Walker, David},
  language  = {en},
  month     = oct,
  publisher = {Cambridge University Press},
  title     = {The pi-calculus},
  year      = 2003,
}

@article{Slavnov19:scmll,
  author   = {Sergey Slavnov},
  doi      = {10.23638/LMCS-15(3:30)2019},
  journal  = {{Logical Methods in Computer Science}},
  keywords = {Computer Science - Logic in Computer Science ; Mathematics - Logic},
  month    = Sep,
  title    = {{On noncommutative extensions of linear logic}},
  volume   = {{Volume 15, Issue 3}},
  year     = {2019},
}

@inproceedings{Strassburger02:ls,
  abstract  = {In this paper I will present a deductive system for linear logic, in which all rules are local. In particular, the contraction rule is reduced to an atomic version, and there is no global promotion rule. In order to achieve this, it is necessary to depart from the sequent calculus and use the calculus of structures, which is a generalization of the one-sided sequent calculus. In a rule, premise and conclusion are not sequents, but structures, which are expressions that share properties of formulae and sequents.},
  address   = {Berlin, Heidelberg},
  author    = {Stra{\ss}burger, Lutz},
  booktitle = {Logic for Programming, Artificial Intelligence, and Reasoning},
  editor    = {Baaz, Matthias
               and Voronkov, Andrei},
  isbn      = {978-3-540-36078-0},
  pages     = {388--402},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Local System for Linear Logic},
  year      = {2002},
}

@article{Stump17:cedille,
  author  = {Stump, Aaron},
  doi     = {10.1017/S0956796817000053},
  journal = {Journal of Functional Programming},
  pages   = {e14},
  title   = {The calculus of dependent lambda eliminations},
  volume  = {27},
  year    = {2017},
}

@inproceedings{StumpT05:eq,
  abstract  = {Proofs of equalities may be built from assumptions using proof rules for reflexivity, symmetry, and transitivity. Reflexivity is an axiom proving x=x for any x; symmetry is a 1-premise rule taking a proof of x=y and returning a proof of y=x; and transitivity is a 2-premise rule taking proofs of x=y and y=z, and returning a proof of x=z. Define an equivalence relation to hold between proofs iff they prove a theorem in common. The main theoretical result of the paper is that if all assumptions are independent, this equivalence relation is axiomatized by the standard axioms of group theory: reflexivity is the unit of the group, symmetry is the inverse, and transitivity is the multiplication. Using a standard completion of the group axioms, we obtain a rewrite system which puts equality proofs into canonical form. Proofs in this canonical form use the fewest possible assumptions, and a proof can be canonized in linear time using a simple strategy. This result is applied to obtain a simple extension of the union-find algorithm for ground equational reasoning which produces minimal proofs. The time complexity of the original union-find operations is preserved, and minimal proofs are produced in worst-case time {\$}O(n^{\{}{\backslash}textit{\{}log{\}}{\_}2 3{\}}){\$}, where n is the number of expressions being equated. As a second application, the approach is used to achieve significant performance improvements for the CVC cooperating decision procedure.},
  address   = {Berlin, Heidelberg},
  author    = {Stump, Aaron
               and Tan, Li-Yang},
  booktitle = {Term Rewriting and Applications},
  editor    = {Giesl, J{\"u}rgen},
  isbn      = {978-3-540-32033-3},
  pages     = {469--483},
  publisher = {Springer Berlin Heidelberg},
  title     = {The Algebra of Equality Proofs},
  year      = {2005},
}

@article{Tiu06:sisii,
  author   = {Alwen Tiu},
  doi      = {10.2168/LMCS-2(2:4)2006},
  journal  = {{Logical Methods in Computer Science}},
  keywords = {Computer Science - Logic in Computer Science ; F.4.1},
  month    = Apr,
  title    = {{A System of Interaction and Structure II: The Need for Deep Inference}},
  url      = {https://lmcs.episciences.org/2252},
  volume   = {{Volume 2, Issue 2}},
  year     = {2006},
}

@article{Turing37:entscheidungsproblem,
  author  = {Alan M. Turing},
  doi     = {10.1112/plms/s2-42.1.230},
  journal = {Proceedings of the London Mathematical Society},
  note    = {Via~\cite{Wikipedia:HaltingProblem} under History.},
  number  = {1},
  pages   = {230-265},
  title   = {On Computable Numbers, with an Application to the Entscheidungsproblem},
  volume  = {s2-42},
  year    = {1937},
}

@inproceedings{Wadler12:cpgv,
  abstract  = {Continuing a line of work by Abramsky (1994), by Bellin and Scott (1994), and by Caires and Pfenning (2010), among others, this paper presents CP, a calculus in which propositions of classical linear logic correspond to session types. Continuing a line of work by Honda (1993), by Honda, Kubo, and Vasconcelos (1998), and by Gay and Vasconcelos (2010), among others, this paper presents GV, a linear functional language with session types, and presents a translation from GV into CP. The translation formalises for the first time a connection between a standard presentation of session types and linear logic, and shows how a modification to the standard presentation yield a language free from deadlock, where deadlock freedom follows from the correspondence to linear logic.},
  address   = {New York, NY, USA},
  author    = {Wadler, Philip},
  booktitle = {Proceedings of the 17th {ACM} {SIGPLAN} International Conference on Functional Programming},
  doi       = {10.1145/2364527.2364568},
  isbn      = {9781450310543},
  keywords  = {lambda calculus, linear logic, pi calculus},
  location  = {Copenhagen, Denmark},
  numpages  = {14},
  pages     = {273–286},
  publisher = {Association for Computing Machinery},
  series    = {ICFP '12},
  title     = {Propositions as Sessions},
  year      = {2012},
}

@article{Wadler14:cpgv-ext,
  author    = {Wadler, Philip},
  doi       = {10.1017/S095679681400001X},
  journal   = {Journal of Functional Programming},
  note      = {Journal version of \cite{Wadler12:cpgv}},
  number    = {2-3},
  pages     = {384–418},
  publisher = {Cambridge University Press},
  title     = {Propositions as sessions},
  volume    = {24},
  year      = {2014},
}

@inbook{Wadler93:taste,
  author    = {Wadler, Philip},
  booktitle = {Mathematical Foundations of Computer Science 1993},
  doi       = {10.1007/3-540-57182-5_12},
  isbn      = {9783540479277},
  issn      = {1611-3349},
  pages     = {185–210},
  publisher = {Springer Berlin Heidelberg},
  title     = {A taste of linear logic},
  url       = {http://dx.doi.org/10.1007/3-540-57182-5_12},
  year      = {1993},
}
@misc{Wikipedia:haltingproblem,
  author = {Wikipedia},
  note   = {[Online; accessed 12-January-2024]},
  title  = {{Halting problem} --- {W}ikipedia{,} The Free Encyclopedia},
  url    = {https://en.wikipedia.org/w/index.php?title=Halting\%20problem&oldid=1184812236},
  year   = {2024},
}

@misc{Wikipedia:multiset,
  author = {Wikipedia},
  note   = {[Online; accessed 12-January-2024]},
  title  = {{Multiset} --- {W}ikipedia{,} The Free Encyclopedia},
  url    = {https://en.wikipedia.org/w/index.php?title=Multiset&oldid=1190627835},
  year   = {2024},
}

@inproceedings{YoshidaHB02:lb,
  abstract  = {We introduce a theory of weak bisimilarity for the $\pi$-calculus with linear type structure [35] in which we abstract away not only $\tau$ - actions but also non-$\tau$ actions which do not affect well-typed environments. This gives an equivalence far larger than the standard bisimilarity while retaining semantic soundness. The congruency of the bisimilarity relies on a liveness property at linear channels ensured by typing. The theory is consistently extendible to settings which involve nontermination, nondeterminism and state. As an application we develop a behavioural theory of secrecy for the $\pi$-calculus which ensures secure information flow for a strictly greater set of processes than the type-based approach in [20][23].},
  address   = {Berlin, Heidelberg},
  author    = {Yoshida, Nobuko
               and Honda, Kohei
               and Berger, Martin},
  booktitle = {Foundations of Software Science and Computation Structures},
  editor    = {Nielsen, Mogens
               and Engberg, Uffe},
  isbn      = {978-3-540-45931-6},
  pages     = {417--433},
  publisher = {Springer Berlin Heidelberg},
  title     = {Linearity and Bisimulation},
  year      = {2002},
}
